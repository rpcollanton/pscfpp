# ======================================================================
# General definitions for all systems (Do not modify)

# Assign value of CXX_FLAGS, depending on whether debugging is enabled
ifdef UTIL_DEBUG
   # Flags for serial programs with debugging
   CXXFLAGS=$(CXXFLAGS_DEBUG)
else
   # Flags for serial programs with no debugging
   CXXFLAGS=$(CXXFLAGS_FAST)
endif

# Initialize INCLUDE path for header files (must include SRC_DIR)
# This initial value is added to in the patterns.mk file in each 
# namespace level subdirectory of the src/ directory.
INCLUDES= -I$(SRC_DIR)

# Variable UTIL_CXX11 must be defined to enable use of features of
# the C++ 2011 language standard. 
UTIL_CXX11=1

# ======================================================================
# Makefile Patterns and Recipes
#
# The makefile variables defined above are used in the makefile pattern 
# rules that control compilation of C++ files, creation of libraries, 
# and linking to create executables. The following sections briefly 
# explain these rules, to provide a context for the meaning of the 
# variables defined above.
#
#-----------------------------------------------------------------------
# Compiler Pattern Rules:
#
# The pattern rule for compiling and linking C++ files in a particular 
# top-level subdirectory of the src/ directory is defined in a file named
# patterns.mk in the relevant subdirectory.  For example, the rule for
# compiling C++ files in the src/fd1d/ directory tree, which contains 
# all entities defined in the Pscf::Fd1d C++ namespace, is given in the 
# file src/fd1d/patterns.mk. The rules for different namespace level
# subdirectories of src/ are similar except for differences in which 
# preprocessor variable definitions are passed to the compiler. For each 
# such subdirectory of src/ namespace, the basic compiler pattern rule for 
# C++ files is of the form:
# 
# $(BLD_DIR)/%.o:$(SRC_DIR)/%.cpp
#      $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $(DEFINES) -c -o $@ $<
#
# This pattern compiles a *.cpp file in a subdirectory of the source 
# directory $(SRC_DIR) and creates a *.o object file in a corresponding
# subdirectory of the build directory, $(BLD_DIR). The variables used
# in this pattern are:
#
# CXX         - C++ compiler executable name 
# CPPFLAGS    - preprocessor options used during compilation
# CXXFLAGS    - compiler options used during compilation
# INCLUDES    - Directories to search for included header files
# DEFINES     - compiler options that define C preprocessor macros
#
# Comments:
# 
# 1) The variable INCLUDES is a string that must include the path 
# $(SRC_DIR) to the pscfpp/src directory, in order to allow the 
# compiler to find header files that are part of the package.
#
# 2) The variable DEFINES in the above pattern is a stand-in for a 
# variable that specifies a list of C preprocessor macro definitions. 
# This variable is not defined in this main configuration file, and
# is assigned different values for code in different top-level 
# subdirectories of src/. A value of DEFINES for each such directory
# is assigned in the corresponding pattern.mk file.  The value of 
# $(DEFINES) for each namespace contains a string of compiler 
# options that use the compiler "-D" option to define the set of
# preprocessor macro definitions used to control conditional
# compilation of optional features that are relevant in a particular 
# namespace. Each of these preprocessor variable macros has the
# same name as a corresponding makefile variable that must be defined
# to enable the feature. Thus for, example, when the build system has 
# been configured to enable debugging, the DEFINES string will include
# a substring "-D UTIL_DEBUG" to define the UTIL_DEBUG preprocessor 
# macro and thereby enable conditional compilation of blocks of code
# that contain optional sanity checks.  
#
# 4) The variable $(CXXFLAGS) should specify all flags that are used by 
# the compiler, rather than only the preprocessor, and that are used in
# all namespaces. This string normally contains the $(CXX_STD) string 
# as a substring, as well as options that specify the optimization 
# level (e.g., -O3) and any desired compiler warnings (e.g., "-Wall").
#
# 5) The variable $(CPPFLAGS) is empty by default 
#
#-----------------------------------------------------------------------
# Archiver Recipes:
#
# The pscfpp build system creates a static library in each namespace
# level subdirectory of the build directory in which code is compiled.
# The recipe used to compile this library is defined in the sources.mk
# file in the appropriate namespace-level directory. The rule for the
# Pscf::Fd1d namespace, as an example, is of the form
#
# $(AR) rcs $(fd1d_LIB) $(fd1d_OBJS)
#
# where $(AR) is the name of archiver command used to create a library,
# $(fd1d_LIB) is an absolute path for the resulting library file and 
# $(fd1d_OBJS) is a string that contains absolute paths for all of the
# *.o object files created by compiling source files in the directory
# src/pspc. Recipes for other namespaces are analogous.
#
#-----------------------------------------------------------------------
# Linker recipes:
# 
# Executable files are created by linking the compiled main program to
# the required set of static libraries. Reciples for creating executables
# are defined in namespace level makefile files. For example, the recipe
# for creating the fd1d executable is defined in the file fd1d/makefile
# within the relevant build directory (bld/ or src/), and is of the form:
#
#	$(CXX) $(LDFLAGS) -o $(PSCF_FD_EXE) $(PSCF_FD).o $(LIBS)
#
# Here $(PSCF_FD_EXE) is the path to the executable, which is installed 
# in the bin/ directory by default, $(PSCF_FD).o is the path to the 
# object file created by compiling the src/fd1d/pscf_fd.cpp source file,
# which contains the main program, $(LIBS) is a list of all required 
# static libraries files, and $(LDFLAGS) is a string containing flags 
# passed to the linker. 
#
# The variable $(LDFLAGS) is empty by default, but can, if necessary, be
# used to specify non-standard paths to required external libraries.
#
#=======================================================================
# Automatic dependency generation.
 
# Scripts invoked to compute dependencies among header files.
MAKEDEP=$(BIN_DIR)/makeDepCpp
MAKEDEP_CUDA=$(BIN_DIR)/makeDepCuda

# The file $(BIN_DIR)/makeDepCpp and $(BIN_DIR)/makeDepCuda are executable 
# python scripts that are installed in the binary directory specified by 
# the setup script, and that is used during compilation to analyze 
# dependencies among C++ files. Both script import a python module named 
# pscfpp.makeDepend that is located in the $(ROOT_DIR)/lib/python/pscfpp
# directory. For the python interpreter to find this, the directory
# $(ROOT_DIR)/lib/python must be in the $PYTHON_PATH environment variable.
