/*! \page user_param_syntax_page 3.2.1 Parameter Files: Syntax

\ref user_param_page    (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_fd_page (Next) 
<BR>

A broadly similar syntax is used for the parameter files used by all programs 
in the pscfpp package.  To illustrate common elements of parameter file syntax, 
let's start with an example:

\section user_param_syntax_fdexample_section Example 

Below, we show an example of a complete parameter file for a simple 1D SCFT 
calculation that can be performed with the program pscf_fd.
We use this example here to explain syntactical features that are common to 
the parameter files used by all pscfpp programs.
Parameter file formats required by specific programs are discussed in greater 
detail in subsequent pages.  Many examples of parameter files can be also 
found in the examples/ directory. 

\code
System{
  Mixture{
     nMonomer   2
     monomers[
                A   1.0  
                B   1.0 
     ]
     nPolymer   2
     Polymer{
        nBlock  2
        blocks[
                0   0.5
                1   0.5
        ]
        phi     0.6
     }
     Polymer{
        type    linear
        nBlock  1
        blocks[
                0   1.0
        ]
        phi     0.4
     }
     ds   0.01
  }
  ChiInteraction{
     chi(
           0    1    10.0
     )
  }
  Domain{
     mode     planar
     xMin     0.0
     xMax     8.0
     nx       401
  }
  NrIterator{
     epsilon   0.00000001
  }
}
\endcode

This particular example gives parameters for a calculation of a binary
mixture of an a symmetric AB diblock copolymer with a hompolymers of type
A in a one-dimensional planar geometry. 

The chemical composition of the system of interest is described within the 
Mixture block, which begins with a line containing the string "Mixture{" 
and ends with a line containing a vertically aligned matching closing curly 
bracket ("}") on a line by itself.  The system described here contains a 
mixture of two types of polymers that are constructed by two types of 
monomer.  Each of the two "Polymer" subblocks of the Mixture block specifies 
the data for one polymer species.  The system described in this file contains 
60% of diblock copolymer by volume (phi = 0.6) and and 40% homopolymer 
(phi= 0.4) by volume.  Both polymer species have overall chain length 1.0 
in the system of units for block volumes used in this input file, and the 
diblock copolymer is symmetric (each block has length 0.5). 

That block that begins with a line containing the string "ChiInteraction{" 
contains values for Flory-Huggins chi parameters.  In general, chi parameters 
for a system with C types of monomer are stored internally in a symmetric 
C x C matrix named "chi", in which the value of an element with indices i 
and j gives the interaction bewteen monomers with monomers with type indices 
i and j.  Values of diagonal elements (i=j) are usually taken equal to zero 
by convention, though this is not required.  In a system with two types of
monomer and zero diagonal elements, only one nonzero chi parameter value
is required.  The value of this parameter is given here as a line containing
"0   1   10.0" between the line containing a label "chi(" and a line 
containing a closing parentheses ")".  This line assigns the chi parameter 
for interaction of monomers of types 0 and 1 (or A and B) a value of 10.0.

The simulation uses a 1D planar geometry, in which variation occurs only 
along one axis of a Cartesian coordinate system.  The block labelled Domain 
contains information about the spatial domain and the number of grid points 
(801 grid points, including the end points).

The block labelled NrIterator contains a parameter labelled "epsilon" used 
by a Newton-Raphson iterator to decide when the SCF equations are solved to 
within a user-specified tolerance.

\section user_param_synatx_blocks_section Parameter File Blocks

Every PSCF parameter file, including the above example, contains a set of
of nested parameter blocks that are delimited by opening and closing curly 
braces.  The syntax is thus reminiscent of that of a C program.  Each such 
block begins with a capitalized label for the block followed immediately 
by an opening curly bracket on the same line, and ends with a closing 
bracket on a line by itself, as in 
\code
  BlockName{
     ....
  }
\endcode
There may not be any whitespace space between the block label (e.g., 
"BlockName", or "Mixture") and the opening curly bracket.

Each such parameter block may contain a combination of the following types 
of elements:
<ul>
   <li> 
     Nested Subblocks: Each nested subblock is delimited by a label that 
     ends in a curly bracket and a matched closing curly brackets.
   </li>
   <li> 
     Individual Parameters:
     Each such parameter value appears on a single line that contains a 
     parameter label followed by a text representation of the parameter 
     value. Examples in the above parameter file include the integer
     nMonomer parameter in the Mixture block, and the nBlock and phi 
     parameters within each Polymer subblock.
   </li>
   <li> 
     1D Arrays of Parameters: Each such array begins with a parameter 
     label that ends with a left square bracket ("[") and ends with line 
     containing 
     a matching right square bracket ("]"). Between these delimiters are lines 
     containing values of array elements, with one value per line. Examples in
     the above parameter are the monomers[...] array in the Mixture block
     and the blocks[...] array in each Polymer{ ... } subblock.
   </li>
   <li> 
     2D Arrays of Parameters:  Each 2D array or matrix of parameters begins 
     with a label and an opening delimiter, and ends with a corresponding 
     closing delimiter.  An example is the chi( .... ) array of the 
     ChiInteraction block. The chi matrix is a symmetric square matrix 
     that is input using a special format in which each line contains the 
     row and column indices and value of one nonzero matrix element, for 
     which parentheses are used as delimiters.
   </li>
</ul>
Each block within a parameter file has a fixed file format: The order 
in which elements must appear within each block of a parameter file is 
predefined by the code that reads the block. Some elements are, however,
optional elements that may be omitted. 

The code that reads a block of a parameter field checks the syntax of
the file format by checking that the label that begins each subblock
and parameter matches an expectd value.  If an expected label is not
found, the program will halt execution after writing an error message 
explaining what label it expected and what it actually found. When 
combined with echoing of the parameter file (by using "-e" command 
line option) these error messages make it relatively easy to identify 
and correct most parameter file syntax errors.

The name of each block within a parameter file generally corresponds to 
the name of a class or class template in the underlying C++ code.  The 
data contained within such a block generally contains the information 
required to initialize the internal state of a corresponding instance
of the specified class. The code required to read the parameter file 
block associated for a particular class is almost always defined in a 
member function of that class named "readParameters". Users who are
comfortable with C++ can thus use knowledge of this convention to 
easily find the source code that reads a particular parameter file block.

Nesting of blocks within a parameter file reflects parent-child ownership 
relationships among C++ objects: Each subblock generally corresponds to 
an object that the parent object "owns", i.e., either either a member of 
the parent object or a dynamically created object that the parent object 
is responsible for creating and destroying.  The outermost block in the 
above example is a "System" block. This reflects the fact that main 
object in the underlying code for a 1D finite-difference program is an 
instance of the class Pscf::Fd1d::System.

\section user_param_synatx_parameter_section Individual Parameters

Each line that assigns a value to an an individual parameter begins with
a label string that identifies the name of the parameter, followed by one 
or more spaces, and then a text representation of the parameter value.  
The name of each parameter generally corresponds to a slightly modified 
version of the name of a member variable of the relevant parent class, 
i.e., a member variable of the class whose name is specfied on a line 
that contains the opening curly bracket of the innermost enclosing 
parameter file block. 

The value of each parameter that is stored in a variable of a primitive 
C data types (e.g., an integer or floating point number) or a string is 
using a standard C text representation for the relevant data type.

Values of some parameters are stored as instances of non-primitive data 
types, such as classes or enumerations, that are defined within the 
pscf source code.  In these cases, as for primitive C data types, each 
parameter is given on a single line containing a label followed by a 
text representation of the value.  The text representation of the 
"value" of each such non-primitive variable must, however, be defined 
by iostream extractor (>>) and insertor (<<) operators that are defined 
for that data type. 

For example, in the above file, the "type" parameter within each 
Polymer subblock of the Mixture block is stored as an enumeration with 
two possible values, for which the text representations are the strings 
"linear" or "branched". The value of the "type" parameter must thus be
given in the parameter file by a string with one of these two allowed 
values. 

\section user_param_synatx_array_section 1D Arrays of Parameters 

Values of some parameters are stored as elements of a one-dimenstional 
array.  Each such array is formatted in a multi-line format in which 
the first row contains a label that contains the name of the array 
followed immediately by an opening square bracket, and the last line 
contains a matching closing square bracket on a line by itself. 
Between these delimiters are values of elements of the array, with 
one element per line. 

Examples of this syntax in the above example are the "monomers" array 
within the Mixture block, and the "blocks" arrays within each Polymer 
subblock of the Mixture block.  The number of expected elements of 
such an array must generally be specified by the value of a parameter 
that appears before the array in the parameter file. For example, the
number of monomer types is specified by parameter nMonomer that 
appears just before the "monomers" array.

\section user_param_synatx_matrix_section 2D Arrays of Parameters 

Variables that are stored internally in two-dimensional arrays can 
use one of two different multi-line parameter file formats. We will
refer to these in what follows as "element format" and "row format".
In either format, dimensions of 2D arrays must be provided by 
parameters that appear in the parameter file before the array. 

<b> Element Format: </b>
In element format, the value of each nonzero element appears on separate
line. This is the format used in above example for the chi matrix.
The element format for an array starts with a line that contains a 
name label followed immediately by an opening parenthesis, and ends 
with a line containing a closing parenthesis. Between these are lines 
that each contain a row index, column index and value of a single
element. When used for square symmetric matrices, like the chi matrix,
this format requires that one enter either the (i,j) or (j,i) element
but not both. The same value is then assigned to both of these 
equivalent elements when either is encountered in the parameter file. 
In this format, elements that are not assigned values are set to zero 
by default, and distinct nonzero elements can appear in any order.

For example, values for elements of a symmetric matrix of chi 
parameters in a system of 3 monomers (nmonomer = 3) with nonzero 
off-diagonal elements and vanishing diagonal elements might look 
something like this
\code
   chi(
       2   0   30.0
       0   1   10.9
       1   2   34.0
   )
\endcode
In this example, zero values are assigned to all diagonal elements
by default.  Nonzero values could be assigned to diagonal elements
by including them in the parameter file format.

<b> Row Format: </b>
In row format, each line of parameter values contains the values for
all of the elements of one row of a corresponding matrix. The row
format for a 2D array begins with a line that contains a label string
followed immediately by an opening square bracket, and ends with a
line containing a closing square bracket on a line by itself, exactly
as for a 1D array. Between these opening and closing lines are lines 
that each contain one row of the corresponding matrix, with values 
of elements formatted exactly as in the standard representation of 
a matrix as an array of number as used in matrix linear algebra. 

For example, the row format for elements of 2 x 3 matrix named 
"matrix" would use a format something like this:
\code
   matrix[
       -15.3   23.0   1.9
         4.8   -9.7  23.3
   ]
\endcode

\section user_param_syntax_optional_section Optional Elements

Each labelled element in a parameter file (i.e, each block or parameter) 
may be either required or optional. Most elements required. 

The label associated with a required element must appear at the expected 
position in a file format, or the program will halt after writing a
error message to standard output that explains the nature of the error. 

The entry for an optional block or parameter may be either included or 
omitted.  If the label associated with an optional block or parameter is 
not found at the expected location in a parameter file, the program will
continue on and try to instead match the label that was found at that
local with the label that identifies the next expected element.
Optional parameters that are omitted from a parameter file are assigned 
default values. 

When echoing of a parameter file is enabled, by invoking a program with
the -e option, the name of each omitted optional parameters is echoed to
standard output followed by the string "[absent]" to indicate that it
was omitted.

Some parameters or blocks in a parameter file may also be required or 
allowed only if parameters that have been read previously take on 
specific values.  Generally, the pscfpp parameter file format does not 
require or allow entry of parameters that are known to be meaningless 
or irrelevent on the basis of parameter values that appear earlier in 
the parameter file.

\section user_param_syntax_polymorphic_section Polymorphic Blocks

Some blocks in a pscfpp parameter file are "polymorphic".  A polymorphic 
block is one that may contain the initial label and format appropriate 
to any of several possible classes that are subclasses of a particular 
base class, and that that serve analogous purposes. In a polymorphic 
parameter file block, the name of the desired subclass is identified 
by the class name label that appears in the opening line of the block. 
The use of polymorphic blocks allows a user to choose at run time from 
among several possible alternative algorithms or other elements of a 
computation.

For example, the block that represents an iterator in a SCFT calculation 
is usually a polymorphic block. The use of a polymorphic block for 
iterators allows users to specify a choice from among several different 
available iterator algorithms. In the above example, the NRIterator 
block appears at a location at the program expects to find the name 
of one of several possible subclasses of the Fd1d::Iterator base class, 
which implement different iterator algorithms. The appearance of a block 
that begins with the name "NRIterator" tells the program that the user 
has selected a Newton-Raphsom iterator that is implemented by the class 
Fd1d::NRIterator, which is a subclass of Fd1d::Iterator. Different 
Iterator subclasses generally require different parameters, and so 
define different parameter file block formats.
 
<BR>
\ref user_param_page  (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_fd_page (Next) 

*/
